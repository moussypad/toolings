AWSTemplateFormatVersion: 2010-09-09
Description: Service roles for Infrastructure pipeline
Parameters:
  DomainName:
    Description: e.g. example.com
    Type: String
    AllowedPattern: (?!-)[a-zA-Z0-9-.]{1,63}(?<![.-])
    ConstraintDescription: Must be a valid domain name
Resources:
  CodeBuildTrustRole:
    Description: Service role for AWS CodeBuild
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub
        - "${tmp}-codebuild-role"
        - { tmp: !Select [0, !Split [".", !Ref DomainName]] }
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codebuild.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  CodeBuildRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn: CodeBuildTrustRole
    Description: Policy for the service role for AWS CodeBuild
    Properties:
      PolicyName: CodeBuildRolePolicy
      PolicyDocument:
        Statement:
        - Effect: Allow
          Action: ["logs:CreateLogGroup", "logs:CreateLogStream", "logs:PutLogEvents"]
          Resource: ["*"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["s3:*"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["kms:GenerateDataKey*", "kms:Encrypt", "kms:Decrypt"]
        - Effect: Allow
          Resource: ["*"]
          Action: ["sns:SendMessage"]
      Roles: [!Ref CodeBuildTrustRole]
  CodePipelineTrustRole:
    Description: Service role for AWS CodePipeline
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - "${tmp}-infrastructure-codepipeline-role"
        - { tmp: !Select [0, !Split [".", !Ref DomainName]] }
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [codepipeline.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  CodePipelineRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn: CodePipelineTrustRole
    Description: Policy for the service role for AWS CodePipeline 
    Properties:
      PolicyName: CodePipelineRolePolicy
      PolicyDocument:
        Statement:
        - Action:
            - 's3:GetObject'
            - 's3:GetObjectVersion'
            - 's3:GetBucketVersioning'
          Resource: '*'
          Effect: Allow
        - Action:
            - 's3:PutObject'
          Resource:
            - 'arn:aws:s3:::moussypad-codepipeline-artifact-store*'
            # - 'arn:aws:s3:::elasticbeanstalk*'
          Effect: Allow
        # - Action:
        #     - 'codecommit:CancelUploadArchive'
        #     - 'codecommit:GetBranch'
        #     - 'codecommit:GetCommit'
        #     - 'codecommit:GetUploadArchiveStatus'
        #     - 'codecommit:UploadArchive'
        #   Resource: '*'
        #   Effect: Allow
        # - Action:
        #     - 'codedeploy:CreateDeployment'
        #     - 'codedeploy:GetApplicationRevision'
        #     - 'codedeploy:GetDeployment'
        #     - 'codedeploy:GetDeploymentConfig'
        #     - 'codedeploy:RegisterApplicationRevision'
        #   Resource: '*'
        #   Effect: Allow
        # - Action:
        #     - 'elasticbeanstalk:*'
        #     - 'ec2:*'
        #     - 'elasticloadbalancing:*'
        #     - 'autoscaling:*'
        #     - 'cloudwatch:*'
        #     - 's3:*'
        #     - 'sns:*'
        #     - 'cloudformation:*'
        #     - 'rds:*'
        #     - 'sqs:*'
        #     - 'ecs:*'
        #     - 'iam:PassRole'
        #   Resource: '*'
        #   Effect: Allow
        # - Action:
        #     - 'lambda:InvokeFunction'
        #     - 'lambda:ListFunctions'
        #   Resource: '*'
        #   Effect: Allow
        # - Action:
        #     - 'opsworks:CreateDeployment'
        #     - 'opsworks:DescribeApps'
        #     - 'opsworks:DescribeCommands'
        #     - 'opsworks:DescribeDeployments'
        #     - 'opsworks:DescribeInstances'
        #     - 'opsworks:DescribeStacks'
        #     - 'opsworks:UpdateApp'
        #     - 'opsworks:UpdateStack'
        #   Resource: '*'
        #   Effect: Allow
        - Action:
            - 'cloudformation:CreateStack'
            - 'cloudformation:DeleteStack'
            - 'cloudformation:DescribeStacks'
            - 'cloudformation:UpdateStack'
            - 'cloudformation:CreateChangeSet'
            - 'cloudformation:DeleteChangeSet'
            - 'cloudformation:DescribeChangeSet'
            - 'cloudformation:ExecuteChangeSet'
            - 'cloudformation:SetStackPolicy'
            - 'cloudformation:ValidateTemplate'
            - 'iam:PassRole'
          Resource: '*'
          Effect: Allow
        # - Action:
        #     - 'codebuild:BatchGetBuilds'
        #     - 'codebuild:StartBuild'
        #   Resource: '*'
        #   Effect: Allow
      Roles: [!Ref CodePipelineTrustRole]
  CloudFormationTrustRole:
    Description: Service role for AWS CloudFormation
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 
        - "${tmp}-infrastructure-cloudformation-role"
        - { tmp: !Select [0, !Split [".", !Ref DomainName]] }
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [cloudformation.amazonaws.com]
          Action: sts:AssumeRole
      Path: /
  CloudFormationRolePolicy:
    Type: AWS::IAM::Policy
    DependsOn: CloudFormationTrustRole
    Description: Policy for the service role for AWS Cloudformation
    Properties:
      PolicyName: CloudFormationRolePolicy
      PolicyDocument:
        Statement:
        - Action: "*"
          Resource: "*"
          Effect: Allow
        # - Action: ["s3:GetObject", "s3:GetObjectVersion", "s3:GetBucketVersioning"]
        #   Resource: "*"
        #   Effect: Allow
        # - Action: ["s3:PutObject"]
        #   Resource: ["arn:aws:s3:::codepipeline*"]
        #   Effect: Allow
        # - Action: ["lambda:*"]
        #   Resource: !Sub "arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:*"
        #   Effect: Allow
        # - Action: ["apigateway:*"]
        #   Resource: !Sub "arn:aws:apigateway:${AWS::Region}::*"
        #   Effect: Allow
        # - Action: ["iam:GetRole", "iam:CreateRole", "iam:DeleteRole"]
        #   Resource: !Sub 
        #     - "arn:aws:iam::${AWS::AccountId}:role/${tmp}-*"
        #     - { tmp: !Select [0, !Split [".", !Ref DomainName]] }
        #   Effect: Allow
        # - Action: ["iam:AttachRolePolicy", "iam:DetachRolePolicy"]
        #   Resource: !Sub
        #     - "arn:aws:iam::${AWS::AccountId}:role/${tmp}-*"
        #     - { tmp: !Select [0, !Split [".", !Ref DomainName]] }
        #   Effect: Allow
        # - Action: ["iam:PassRole"]
        #   Resource: ["*"]
        #   Effect: Allow
        # - Action: ["cloudformation:CreateChangeSet"]
        #   Resource: !Sub "arn:aws:cloudformation:${AWS::Region}:aws:transform/Serverless-2016-10-31"
        #   Effect: Allow
      Roles: [!Ref CloudFormationTrustRole]
Outputs:
  CodeBuildRoleArn:
    Value: !GetAtt CodeBuildTrustRole.Arn
  CodePipelineRoleArn:
    Value: !GetAtt CodePipelineTrustRole.Arn
  CloudFormationRoleArn:
    Value: !GetAtt CloudFormationTrustRole.Arn